buildscript {
    // 定义变量
    ext {
        ALI_REPOSITORY_URL = "https://maven.aliyun.com/repository/public/"
        springBootVersion = "3.2.3"
        springCloudAlibabaVersion = "2023.0.0.0-RC1"
        springCloudVersion = "4.1.0"
        okHttpVersion = "4.12.0"
        hutoolVersion = "5.8.26"
        apacheLangVersion = "3.14.0"
        lombokVersion = "1.18.30"
        redssionVersion = "3.27.1"
        fastjsonVersion = "2.0.47"
        guavaVersion = "33.0.0-jre"
        springCloudDependenciesVersion = "2023.0.0"
        feignOkHttpVersion = "13.2.1"
        mybatisVersion = "3.0.3"
        mysqlVersion = "8.3.0"
        easyexcelVersion = "3.3.3"
        commonsCsvVersion = "1.10.0"
        hibernateValidator = "8.0.1.Final"
    }
    // 仓库地址
    repositories {
        // 先从阿里云maven仓库中去下载，没有再去maven中央仓库
        maven {
            url ALI_REPOSITORY_URL
        }
        mavenCentral()

    }
    // 构建时所需要的插件或者是其他的依赖
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }

}
// 所有模块的总仓库地址
allprojects {
    // 在build.gradle文件中直接声明的依赖项、仓库地址等信息是项目自身需要的资源。
    repositories {
        maven {
            url ALI_REPOSITORY_URL
        }
    }
}
subprojects {
    apply plugin: 'java'
    apply plugin: 'war';
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    // 指定编码格式
    [compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'
    version = "1.0.0-SNAPSHOT"  // 开发版本： -SNAPSHOT 正式版本：.RELEASE
    dependencies {
        testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
        implementation("com.squareup.okhttp3:okhttp:${okHttpVersion}")
        implementation("com.alibaba.fastjson2:fastjson2-extension:${fastjsonVersion}")
        implementation("cn.hutool:hutool-all:${hutoolVersion}")
        implementation("org.apache.commons:commons-lang3:${apacheLangVersion}")
        implementation("io.github.openfeign:feign-okhttp:${feignOkHttpVersion}")
        runtimeOnly("org.springframework.cloud:spring-cloud-dependencies:${springCloudDependenciesVersion}")
        compileOnly("org.projectlombok:lombok:${lombokVersion}")
        implementation("org.projectlombok:lombok:${lombokVersion}")
        annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
        implementation("com.google.guava:guava:${guavaVersion}")
    }
    dependencyManagement {
        imports {
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
        dependencies {
            dependency("org.springframework.cloud:spring-cloud-loadbalancer:${springCloudVersion}")
            dependency("org.springframework.cloud:spring-cloud-starter-bootstrap:${springCloudVersion}")
            dependency("org.springframework.cloud:spring-cloud-starter-openfeign:${springCloudVersion}")
            dependency("org.springframework.cloud:spring-cloud-starter-gateway:${springCloudVersion}")
            dependency("org.redisson:redisson-spring-boot-starter:${redssionVersion}")
            dependency("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}")
            dependency("com.mysql:mysql-connector-j:${mysqlVersion}")
            dependency("com.alibaba:easyexcel:${easyexcelVersion}")
            dependency("org.apache.commons:commons-csv:${commonsCsvVersion}")
            dependency("org.hibernate.validator:hibernate-validator:${hibernateValidator}")
        }

    }
}

